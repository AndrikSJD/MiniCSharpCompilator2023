//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/user/Escritorio/Compi/Proyecto/thirdStage/MiniCSharpCompilator2023/Compilator/Compilator\MiniCSharpParser.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SyntacticAnalysisGenerated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class MiniCSharpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, BLOCKCOMMENT=2, WS=3, CLASS=4, USING=5, VOID=6, IF=7, ELSE=8, 
		FOR=9, WHILE=10, BREAK=11, RETURN=12, READ=13, WRITE=14, NEW=15, LBRACE=16, 
		RBRACE=17, LPARENT=18, RPARENT=19, LBRACK=20, RBRACK=21, SEMICOLON=22, 
		COMMA=23, DOT=24, ASSIGN=25, INC=26, DEC=27, OR=28, AND=29, EQUAL=30, 
		NOTEQUAL=31, GT=32, GE=33, LT=34, LE=35, ADD=36, SUB=37, MUL=38, DIV=39, 
		MOD=40, TrueCONST=41, FalseCONST=42, DOUBLECONST=43, INTCONST=44, ID=45, 
		STRINGCONST=46, CHARCONST=47;
	public const int
		RULE_program = 0, RULE_using = 1, RULE_varDecl = 2, RULE_classDecl = 3, 
		RULE_methodDecl = 4, RULE_formPars = 5, RULE_type = 6, RULE_statement = 7, 
		RULE_block = 8, RULE_actPars = 9, RULE_condition = 10, RULE_condTerm = 11, 
		RULE_condFact = 12, RULE_cast = 13, RULE_expr = 14, RULE_addop = 15, RULE_term = 16, 
		RULE_muldimod = 17, RULE_factor = 18, RULE_designator = 19, RULE_ident = 20, 
		RULE_relop = 21;
	public static readonly string[] ruleNames = {
		"program", "using", "varDecl", "classDecl", "methodDecl", "formPars", 
		"type", "statement", "block", "actPars", "condition", "condTerm", "condFact", 
		"cast", "expr", "addop", "term", "muldimod", "factor", "designator", "ident", 
		"relop"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'class'", "'using'", "'void'", "'if'", "'else'", 
		"'for'", "'while'", "'break'", "'return'", "'read'", "'write'", "'new'", 
		"'{'", "'}'", "'('", "')'", "'['", "']'", "';'", "','", "'.'", "'='", 
		"'++'", "'--'", "'||'", "'&&'", "'=='", "'!='", "'>'", "'>='", "'<'", 
		"'<='", "'+'", "'-'", "'*'", "'/'", "'%'", "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "BLOCKCOMMENT", "WS", "CLASS", "USING", "VOID", "IF", 
		"ELSE", "FOR", "WHILE", "BREAK", "RETURN", "READ", "WRITE", "NEW", "LBRACE", 
		"RBRACE", "LPARENT", "RPARENT", "LBRACK", "RBRACK", "SEMICOLON", "COMMA", 
		"DOT", "ASSIGN", "INC", "DEC", "OR", "AND", "EQUAL", "NOTEQUAL", "GT", 
		"GE", "LT", "LE", "ADD", "SUB", "MUL", "DIV", "MOD", "TrueCONST", "FalseCONST", 
		"DOUBLECONST", "INTCONST", "ID", "STRINGCONST", "CHARCONST"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCSharpParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCSharpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniCSharpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniCSharpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	 
		public ProgramContext() { }
		public virtual void CopyFrom(ProgramContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ProgramASTContext : ProgramContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(MiniCSharpParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCSharpParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCSharpParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MiniCSharpParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsingContext[] @using() {
			return GetRuleContexts<UsingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsingContext @using(int i) {
			return GetRuleContext<UsingContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext[] classDecl() {
			return GetRuleContexts<ClassDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclContext classDecl(int i) {
			return GetRuleContext<ClassDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext[] methodDecl() {
			return GetRuleContexts<MethodDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext methodDecl(int i) {
			return GetRuleContext<MethodDeclContext>(i);
		}
		public ProgramASTContext(ProgramContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			_localctx = new ProgramASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 44;
				@using();
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 50;
			Match(CLASS);
			State = 51;
			ident();
			State = 52;
			Match(LBRACE);
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35184372088912L) != 0)) {
				{
				State = 56;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 53;
					varDecl();
					}
					break;
				case 2:
					{
					State = 54;
					classDecl();
					}
					break;
				case 3:
					{
					State = 55;
					methodDecl();
					}
					break;
				}
				}
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 61;
			Match(RBRACE);
			State = 62;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingContext : ParserRuleContext {
		public UsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using; } }
	 
		public UsingContext() { }
		public virtual void CopyFrom(UsingContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UsingASTContext : UsingContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MiniCSharpParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		public UsingASTContext(UsingContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingContext @using() {
		UsingContext _localctx = new UsingContext(Context, State);
		EnterRule(_localctx, 2, RULE_using);
		try {
			_localctx = new UsingASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			Match(USING);
			State = 65;
			ident();
			State = 66;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public int indexVar = 0;
		public bool isLocal = false;
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
	 
		public VarDeclContext() { }
		public virtual void CopyFrom(VarDeclContext context) {
			base.CopyFrom(context);
			this.indexVar = context.indexVar;
			this.isLocal = context.isLocal;
		}
	}
	public partial class VarDeclASTContext : VarDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSharpParser.COMMA, i);
		}
		public VarDeclASTContext(VarDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_varDecl);
		int _la;
		try {
			_localctx = new VarDeclASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			type();
			State = 69;
			ident();
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 70;
				Match(COMMA);
				State = 71;
				ident();
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 77;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
	 
		public ClassDeclContext() { }
		public virtual void CopyFrom(ClassDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ClassDeclASTContext : ClassDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(MiniCSharpParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCSharpParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCSharpParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDeclASTContext(ClassDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_classDecl);
		int _la;
		try {
			_localctx = new ClassDeclASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(CLASS);
			State = 80;
			ident();
			State = 81;
			Match(LBRACE);
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 82;
				varDecl();
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 88;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
	 
		public MethodDeclContext() { }
		public virtual void CopyFrom(MethodDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MethodDeclASTContext : MethodDeclContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(MiniCSharpParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(MiniCSharpParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(MiniCSharpParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormParsContext formPars() {
			return GetRuleContext<FormParsContext>(0);
		}
		public MethodDeclASTContext(MethodDeclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_methodDecl);
		int _la;
		try {
			_localctx = new MethodDeclASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				State = 90;
				type();
				}
				break;
			case VOID:
				{
				State = 91;
				Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 94;
			ident();
			State = 95;
			Match(LPARENT);
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 96;
				formPars();
				}
			}

			State = 99;
			Match(RPARENT);
			State = 100;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormParsContext : ParserRuleContext {
		public FormParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formPars; } }
	 
		public FormParsContext() { }
		public virtual void CopyFrom(FormParsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FormParsASTContext : FormParsContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSharpParser.COMMA, i);
		}
		public FormParsASTContext(FormParsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormParsAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormParsContext formPars() {
		FormParsContext _localctx = new FormParsContext(Context, State);
		EnterRule(_localctx, 10, RULE_formPars);
		int _la;
		try {
			_localctx = new FormParsASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			type();
			State = 103;
			ident();
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 104;
				Match(COMMA);
				State = 105;
				type();
				State = 106;
				ident();
				}
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeASTContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MiniCSharpParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MiniCSharpParser.RBRACK, 0); }
		public TypeASTContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_type);
		int _la;
		try {
			_localctx = new TypeASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			ident();
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK) {
				{
				State = 114;
				Match(LBRACK);
				State = 115;
				Match(RBRACK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WhileStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(MiniCSharpParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(MiniCSharpParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(MiniCSharpParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SemicolonStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		public SemicolonStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSemicolonStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReadStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MiniCSharpParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(MiniCSharpParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(MiniCSharpParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		public ReadStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MiniCSharpParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MiniCSharpParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(MiniCSharpParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(MiniCSharpParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(MiniCSharpParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(MiniCSharpParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ForStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(MiniCSharpParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		public BreakStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MiniCSharpParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(MiniCSharpParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(MiniCSharpParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MiniCSharpParser.ELSE, 0); }
		public IfStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WriteStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(MiniCSharpParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(MiniCSharpParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(MiniCSharpParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MiniCSharpParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTCONST() { return GetToken(MiniCSharpParser.INTCONST, 0); }
		public WriteStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MiniCSharpParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MiniCSharpParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(MiniCSharpParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(MiniCSharpParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(MiniCSharpParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(MiniCSharpParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public AssignStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockCommentStatementASTContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCKCOMMENT() { return GetToken(MiniCSharpParser.BLOCKCOMMENT, 0); }
		public BlockCommentStatementASTContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockCommentStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		int _la;
		try {
			State = 187;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				_localctx = new AssignStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 118;
				designator();
				State = 128;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ASSIGN:
					{
					State = 119;
					Match(ASSIGN);
					State = 120;
					expr();
					}
					break;
				case LPARENT:
					{
					State = 121;
					Match(LPARENT);
					State = 123;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 279413392703488L) != 0)) {
						{
						State = 122;
						actPars();
						}
					}

					State = 125;
					Match(RPARENT);
					}
					break;
				case INC:
					{
					State = 126;
					Match(INC);
					}
					break;
				case DEC:
					{
					State = 127;
					Match(DEC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 130;
				Match(SEMICOLON);
				}
				break;
			case IF:
				_localctx = new IfStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 132;
				Match(IF);
				State = 133;
				Match(LPARENT);
				State = 134;
				condition();
				State = 135;
				Match(RPARENT);
				State = 136;
				statement();
				State = 139;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 137;
					Match(ELSE);
					State = 138;
					statement();
					}
					break;
				}
				}
				break;
			case FOR:
				_localctx = new ForStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 141;
				Match(FOR);
				State = 142;
				Match(LPARENT);
				State = 143;
				expr();
				State = 144;
				Match(SEMICOLON);
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 279413392703488L) != 0)) {
					{
					State = 145;
					condition();
					}
				}

				State = 148;
				Match(SEMICOLON);
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35184376381060L) != 0)) {
					{
					State = 149;
					statement();
					}
				}

				State = 152;
				Match(RPARENT);
				State = 153;
				statement();
				}
				break;
			case WHILE:
				_localctx = new WhileStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 155;
				Match(WHILE);
				State = 156;
				Match(LPARENT);
				State = 157;
				condition();
				State = 158;
				Match(RPARENT);
				State = 159;
				statement();
				}
				break;
			case BREAK:
				_localctx = new BreakStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 161;
				Match(BREAK);
				State = 162;
				Match(SEMICOLON);
				}
				break;
			case RETURN:
				_localctx = new ReturnStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 163;
				Match(RETURN);
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 279413392703488L) != 0)) {
					{
					State = 164;
					expr();
					}
				}

				State = 167;
				Match(SEMICOLON);
				}
				break;
			case READ:
				_localctx = new ReadStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 168;
				Match(READ);
				State = 169;
				Match(LPARENT);
				State = 170;
				designator();
				State = 171;
				Match(RPARENT);
				State = 172;
				Match(SEMICOLON);
				}
				break;
			case WRITE:
				_localctx = new WriteStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 174;
				Match(WRITE);
				State = 175;
				Match(LPARENT);
				State = 176;
				expr();
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 177;
					Match(COMMA);
					State = 178;
					Match(INTCONST);
					}
				}

				State = 181;
				Match(RPARENT);
				State = 182;
				Match(SEMICOLON);
				}
				break;
			case LBRACE:
				_localctx = new BlockStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 184;
				block();
				}
				break;
			case BLOCKCOMMENT:
				_localctx = new BlockCommentStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 185;
				Match(BLOCKCOMMENT);
				}
				break;
			case SEMICOLON:
				_localctx = new SemicolonStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 186;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	 
		public BlockContext() { }
		public virtual void CopyFrom(BlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockASTContext : BlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MiniCSharpParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MiniCSharpParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockASTContext(BlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_block);
		int _la;
		try {
			_localctx = new BlockASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			Match(LBRACE);
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35184376381060L) != 0)) {
				{
				State = 192;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 190;
					varDecl();
					}
					break;
				case 2:
					{
					State = 191;
					statement();
					}
					break;
				}
				}
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 197;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActParsContext : ParserRuleContext {
		public ActParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actPars; } }
	 
		public ActParsContext() { }
		public virtual void CopyFrom(ActParsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ActParsASTContext : ActParsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MiniCSharpParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MiniCSharpParser.COMMA, i);
		}
		public ActParsASTContext(ActParsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActParsAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActParsContext actPars() {
		ActParsContext _localctx = new ActParsContext(Context, State);
		EnterRule(_localctx, 18, RULE_actPars);
		int _la;
		try {
			_localctx = new ActParsASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			expr();
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 200;
				Match(COMMA);
				State = 201;
				expr();
				}
				}
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
	 
		public ConditionContext() { }
		public virtual void CopyFrom(ConditionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConditionASTContext : ConditionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext[] condTerm() {
			return GetRuleContexts<CondTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondTermContext condTerm(int i) {
			return GetRuleContext<CondTermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(MiniCSharpParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(MiniCSharpParser.OR, i);
		}
		public ConditionASTContext(ConditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 20, RULE_condition);
		int _la;
		try {
			_localctx = new ConditionASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			condTerm();
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 208;
				Match(OR);
				State = 209;
				condTerm();
				}
				}
				State = 214;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondTermContext : ParserRuleContext {
		public CondTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condTerm; } }
	 
		public CondTermContext() { }
		public virtual void CopyFrom(CondTermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CondTermASTContext : CondTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext[] condFact() {
			return GetRuleContexts<CondFactContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondFactContext condFact(int i) {
			return GetRuleContext<CondFactContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(MiniCSharpParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(MiniCSharpParser.AND, i);
		}
		public CondTermASTContext(CondTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondTermAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondTermContext condTerm() {
		CondTermContext _localctx = new CondTermContext(Context, State);
		EnterRule(_localctx, 22, RULE_condTerm);
		int _la;
		try {
			_localctx = new CondTermASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			condFact();
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 216;
				Match(AND);
				State = 217;
				condFact();
				}
				}
				State = 222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondFactContext : ParserRuleContext {
		public CondFactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condFact; } }
	 
		public CondFactContext() { }
		public virtual void CopyFrom(CondFactContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CondFactASTContext : CondFactContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelopContext relop() {
			return GetRuleContext<RelopContext>(0);
		}
		public CondFactASTContext(CondFactContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondFactAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondFactContext condFact() {
		CondFactContext _localctx = new CondFactContext(Context, State);
		EnterRule(_localctx, 24, RULE_condFact);
		try {
			_localctx = new CondFactASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			expr();
			State = 224;
			relop();
			State = 225;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastContext : ParserRuleContext {
		public CastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast; } }
	 
		public CastContext() { }
		public virtual void CopyFrom(CastContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CastASTContext : CastContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(MiniCSharpParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(MiniCSharpParser.RPARENT, 0); }
		public CastASTContext(CastContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastContext cast() {
		CastContext _localctx = new CastContext(Context, State);
		EnterRule(_localctx, 26, RULE_cast);
		try {
			_localctx = new CastASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			Match(LPARENT);
			State = 228;
			type();
			State = 229;
			Match(RPARENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionASTContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(MiniCSharpParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastContext cast() {
			return GetRuleContext<CastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddopContext[] addop() {
			return GetRuleContexts<AddopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddopContext addop(int i) {
			return GetRuleContext<AddopContext>(i);
		}
		public ExpressionASTContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_expr);
		int _la;
		try {
			_localctx = new ExpressionASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 231;
				Match(SUB);
				}
				break;
			case 2:
				{
				State = 232;
				cast();
				}
				break;
			}
			State = 235;
			term();
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ADD || _la==SUB) {
				{
				{
				State = 236;
				addop();
				State = 237;
				term();
				}
				}
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddopContext : ParserRuleContext {
		public AddopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addop; } }
	 
		public AddopContext() { }
		public virtual void CopyFrom(AddopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddopASTContext : AddopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MiniCSharpParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(MiniCSharpParser.SUB, 0); }
		public AddopASTContext(AddopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddopAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddopContext addop() {
		AddopContext _localctx = new AddopContext(Context, State);
		EnterRule(_localctx, 30, RULE_addop);
		int _la;
		try {
			_localctx = new AddopASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==SUB) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TermASTContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MuldimodContext[] muldimod() {
			return GetRuleContexts<MuldimodContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MuldimodContext muldimod(int i) {
			return GetRuleContext<MuldimodContext>(i);
		}
		public TermASTContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 32, RULE_term);
		int _la;
		try {
			_localctx = new TermASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			factor();
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1924145348608L) != 0)) {
				{
				{
				State = 247;
				muldimod();
				State = 248;
				factor();
				}
				}
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MuldimodContext : ParserRuleContext {
		public MuldimodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_muldimod; } }
	 
		public MuldimodContext() { }
		public virtual void CopyFrom(MuldimodContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MuldimodASTContext : MuldimodContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(MiniCSharpParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(MiniCSharpParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(MiniCSharpParser.MOD, 0); }
		public MuldimodASTContext(MuldimodContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMuldimodAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MuldimodContext muldimod() {
		MuldimodContext _localctx = new MuldimodContext(Context, State);
		EnterRule(_localctx, 34, RULE_muldimod);
		int _la;
		try {
			_localctx = new MuldimodASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1924145348608L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	 
		public FactorContext() { }
		public virtual void CopyFrom(FactorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FactorASTContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(MiniCSharpParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(MiniCSharpParser.RPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public FactorASTContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewFactorASTContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(MiniCSharpParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MiniCSharpParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MiniCSharpParser.RBRACK, 0); }
		public NewFactorASTContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanFactorASTContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TrueCONST() { return GetToken(MiniCSharpParser.TrueCONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FalseCONST() { return GetToken(MiniCSharpParser.FalseCONST, 0); }
		public BooleanFactorASTContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumFactorASTContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTCONST() { return GetToken(MiniCSharpParser.INTCONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(MiniCSharpParser.SUB, 0); }
		public NumFactorASTContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringFactorASTContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGCONST() { return GetToken(MiniCSharpParser.STRINGCONST, 0); }
		public StringFactorASTContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharFactorASTContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARCONST() { return GetToken(MiniCSharpParser.CHARCONST, 0); }
		public CharFactorASTContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleFactorASTContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECONST() { return GetToken(MiniCSharpParser.DOUBLECONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(MiniCSharpParser.SUB, 0); }
		public DoubleFactorASTContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenFactorASTContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENT() { return GetToken(MiniCSharpParser.LPARENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENT() { return GetToken(MiniCSharpParser.RPARENT, 0); }
		public ParenFactorASTContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 36, RULE_factor);
		int _la;
		try {
			State = 288;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				_localctx = new FactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 257;
				designator();
				State = 263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPARENT) {
					{
					State = 258;
					Match(LPARENT);
					State = 260;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 279413392703488L) != 0)) {
						{
						State = 259;
						actPars();
						}
					}

					State = 262;
					Match(RPARENT);
					}
				}

				}
				break;
			case 2:
				_localctx = new NumFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SUB) {
					{
					State = 265;
					Match(SUB);
					}
				}

				State = 268;
				Match(INTCONST);
				}
				break;
			case 3:
				_localctx = new CharFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 269;
				Match(CHARCONST);
				}
				break;
			case 4:
				_localctx = new StringFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 270;
				Match(STRINGCONST);
				}
				break;
			case 5:
				_localctx = new DoubleFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 272;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SUB) {
					{
					State = 271;
					Match(SUB);
					}
				}

				State = 274;
				Match(DOUBLECONST);
				}
				break;
			case 6:
				_localctx = new BooleanFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 275;
				_la = TokenStream.LA(1);
				if ( !(_la==TrueCONST || _la==FalseCONST) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 7:
				_localctx = new NewFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 276;
				Match(NEW);
				State = 277;
				ident();
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACK) {
					{
					State = 278;
					Match(LBRACK);
					State = 279;
					expr();
					State = 280;
					Match(RBRACK);
					}
				}

				}
				break;
			case 8:
				_localctx = new ParenFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 284;
				Match(LPARENT);
				State = 285;
				expr();
				State = 286;
				Match(RPARENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
	 
		public DesignatorContext() { }
		public virtual void CopyFrom(DesignatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DesignatorASTContext : DesignatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(MiniCSharpParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(MiniCSharpParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(MiniCSharpParser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(MiniCSharpParser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(MiniCSharpParser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(MiniCSharpParser.RBRACK, i);
		}
		public DesignatorASTContext(DesignatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignatorAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 38, RULE_designator);
		int _la;
		try {
			_localctx = new DesignatorASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			ident();
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK || _la==DOT) {
				{
				State = 297;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					{
					State = 291;
					Match(DOT);
					State = 292;
					ident();
					}
					}
					break;
				case LBRACK:
					{
					{
					State = 293;
					Match(LBRACK);
					State = 294;
					expr();
					State = 295;
					Match(RBRACK);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentContext : ParserRuleContext {
		public ParserRuleContext declPointer = null;
		public IdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ident; } }
	 
		public IdentContext() { }
		public virtual void CopyFrom(IdentContext context) {
			base.CopyFrom(context);
			this.declPointer = context.declPointer;
		}
	}
	public partial class IdentASTContext : IdentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniCSharpParser.ID, 0); }
		public IdentASTContext(IdentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentContext ident() {
		IdentContext _localctx = new IdentContext(Context, State);
		EnterRule(_localctx, 40, RULE_ident);
		try {
			_localctx = new IdentASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
	 
		public RelopContext() { }
		public virtual void CopyFrom(RelopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RelopASTContext : RelopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(MiniCSharpParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(MiniCSharpParser.NOTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(MiniCSharpParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(MiniCSharpParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(MiniCSharpParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(MiniCSharpParser.LE, 0); }
		public RelopASTContext(RelopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCSharpParserVisitor<TResult> typedVisitor = visitor as IMiniCSharpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelopAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(Context, State);
		EnterRule(_localctx, 42, RULE_relop);
		int _la;
		try {
			_localctx = new RelopASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 67645734912L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,47,307,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		1,0,5,0,46,8,0,10,0,12,0,49,9,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,57,8,0,10,
		0,12,0,60,9,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,5,2,73,8,2,10,
		2,12,2,76,9,2,1,2,1,2,1,3,1,3,1,3,1,3,5,3,84,8,3,10,3,12,3,87,9,3,1,3,
		1,3,1,4,1,4,3,4,93,8,4,1,4,1,4,1,4,3,4,98,8,4,1,4,1,4,1,4,1,5,1,5,1,5,
		1,5,1,5,1,5,5,5,109,8,5,10,5,12,5,112,9,5,1,6,1,6,1,6,3,6,117,8,6,1,7,
		1,7,1,7,1,7,1,7,3,7,124,8,7,1,7,1,7,1,7,3,7,129,8,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,3,7,140,8,7,1,7,1,7,1,7,1,7,1,7,3,7,147,8,7,1,7,1,7,
		3,7,151,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,166,
		8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,180,8,7,1,7,1,
		7,1,7,1,7,1,7,1,7,3,7,188,8,7,1,8,1,8,1,8,5,8,193,8,8,10,8,12,8,196,9,
		8,1,8,1,8,1,9,1,9,1,9,5,9,203,8,9,10,9,12,9,206,9,9,1,10,1,10,1,10,5,10,
		211,8,10,10,10,12,10,214,9,10,1,11,1,11,1,11,5,11,219,8,11,10,11,12,11,
		222,9,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,3,14,234,8,
		14,1,14,1,14,1,14,1,14,5,14,240,8,14,10,14,12,14,243,9,14,1,15,1,15,1,
		16,1,16,1,16,1,16,5,16,251,8,16,10,16,12,16,254,9,16,1,17,1,17,1,18,1,
		18,1,18,3,18,261,8,18,1,18,3,18,264,8,18,1,18,3,18,267,8,18,1,18,1,18,
		1,18,1,18,3,18,273,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,283,
		8,18,1,18,1,18,1,18,1,18,3,18,289,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,
		19,5,19,298,8,19,10,19,12,19,301,9,19,1,20,1,20,1,21,1,21,1,21,0,0,22,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,0,4,1,0,36,
		37,1,0,38,40,1,0,41,42,1,0,30,35,336,0,47,1,0,0,0,2,64,1,0,0,0,4,68,1,
		0,0,0,6,79,1,0,0,0,8,92,1,0,0,0,10,102,1,0,0,0,12,113,1,0,0,0,14,187,1,
		0,0,0,16,189,1,0,0,0,18,199,1,0,0,0,20,207,1,0,0,0,22,215,1,0,0,0,24,223,
		1,0,0,0,26,227,1,0,0,0,28,233,1,0,0,0,30,244,1,0,0,0,32,246,1,0,0,0,34,
		255,1,0,0,0,36,288,1,0,0,0,38,290,1,0,0,0,40,302,1,0,0,0,42,304,1,0,0,
		0,44,46,3,2,1,0,45,44,1,0,0,0,46,49,1,0,0,0,47,45,1,0,0,0,47,48,1,0,0,
		0,48,50,1,0,0,0,49,47,1,0,0,0,50,51,5,4,0,0,51,52,3,40,20,0,52,58,5,16,
		0,0,53,57,3,4,2,0,54,57,3,6,3,0,55,57,3,8,4,0,56,53,1,0,0,0,56,54,1,0,
		0,0,56,55,1,0,0,0,57,60,1,0,0,0,58,56,1,0,0,0,58,59,1,0,0,0,59,61,1,0,
		0,0,60,58,1,0,0,0,61,62,5,17,0,0,62,63,5,0,0,1,63,1,1,0,0,0,64,65,5,5,
		0,0,65,66,3,40,20,0,66,67,5,22,0,0,67,3,1,0,0,0,68,69,3,12,6,0,69,74,3,
		40,20,0,70,71,5,23,0,0,71,73,3,40,20,0,72,70,1,0,0,0,73,76,1,0,0,0,74,
		72,1,0,0,0,74,75,1,0,0,0,75,77,1,0,0,0,76,74,1,0,0,0,77,78,5,22,0,0,78,
		5,1,0,0,0,79,80,5,4,0,0,80,81,3,40,20,0,81,85,5,16,0,0,82,84,3,4,2,0,83,
		82,1,0,0,0,84,87,1,0,0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,88,1,0,0,0,87,
		85,1,0,0,0,88,89,5,17,0,0,89,7,1,0,0,0,90,93,3,12,6,0,91,93,5,6,0,0,92,
		90,1,0,0,0,92,91,1,0,0,0,93,94,1,0,0,0,94,95,3,40,20,0,95,97,5,18,0,0,
		96,98,3,10,5,0,97,96,1,0,0,0,97,98,1,0,0,0,98,99,1,0,0,0,99,100,5,19,0,
		0,100,101,3,16,8,0,101,9,1,0,0,0,102,103,3,12,6,0,103,110,3,40,20,0,104,
		105,5,23,0,0,105,106,3,12,6,0,106,107,3,40,20,0,107,109,1,0,0,0,108,104,
		1,0,0,0,109,112,1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,11,1,0,0,0,
		112,110,1,0,0,0,113,116,3,40,20,0,114,115,5,20,0,0,115,117,5,21,0,0,116,
		114,1,0,0,0,116,117,1,0,0,0,117,13,1,0,0,0,118,128,3,38,19,0,119,120,5,
		25,0,0,120,129,3,28,14,0,121,123,5,18,0,0,122,124,3,18,9,0,123,122,1,0,
		0,0,123,124,1,0,0,0,124,125,1,0,0,0,125,129,5,19,0,0,126,129,5,26,0,0,
		127,129,5,27,0,0,128,119,1,0,0,0,128,121,1,0,0,0,128,126,1,0,0,0,128,127,
		1,0,0,0,129,130,1,0,0,0,130,131,5,22,0,0,131,188,1,0,0,0,132,133,5,7,0,
		0,133,134,5,18,0,0,134,135,3,20,10,0,135,136,5,19,0,0,136,139,3,14,7,0,
		137,138,5,8,0,0,138,140,3,14,7,0,139,137,1,0,0,0,139,140,1,0,0,0,140,188,
		1,0,0,0,141,142,5,9,0,0,142,143,5,18,0,0,143,144,3,28,14,0,144,146,5,22,
		0,0,145,147,3,20,10,0,146,145,1,0,0,0,146,147,1,0,0,0,147,148,1,0,0,0,
		148,150,5,22,0,0,149,151,3,14,7,0,150,149,1,0,0,0,150,151,1,0,0,0,151,
		152,1,0,0,0,152,153,5,19,0,0,153,154,3,14,7,0,154,188,1,0,0,0,155,156,
		5,10,0,0,156,157,5,18,0,0,157,158,3,20,10,0,158,159,5,19,0,0,159,160,3,
		14,7,0,160,188,1,0,0,0,161,162,5,11,0,0,162,188,5,22,0,0,163,165,5,12,
		0,0,164,166,3,28,14,0,165,164,1,0,0,0,165,166,1,0,0,0,166,167,1,0,0,0,
		167,188,5,22,0,0,168,169,5,13,0,0,169,170,5,18,0,0,170,171,3,38,19,0,171,
		172,5,19,0,0,172,173,5,22,0,0,173,188,1,0,0,0,174,175,5,14,0,0,175,176,
		5,18,0,0,176,179,3,28,14,0,177,178,5,23,0,0,178,180,5,44,0,0,179,177,1,
		0,0,0,179,180,1,0,0,0,180,181,1,0,0,0,181,182,5,19,0,0,182,183,5,22,0,
		0,183,188,1,0,0,0,184,188,3,16,8,0,185,188,5,2,0,0,186,188,5,22,0,0,187,
		118,1,0,0,0,187,132,1,0,0,0,187,141,1,0,0,0,187,155,1,0,0,0,187,161,1,
		0,0,0,187,163,1,0,0,0,187,168,1,0,0,0,187,174,1,0,0,0,187,184,1,0,0,0,
		187,185,1,0,0,0,187,186,1,0,0,0,188,15,1,0,0,0,189,194,5,16,0,0,190,193,
		3,4,2,0,191,193,3,14,7,0,192,190,1,0,0,0,192,191,1,0,0,0,193,196,1,0,0,
		0,194,192,1,0,0,0,194,195,1,0,0,0,195,197,1,0,0,0,196,194,1,0,0,0,197,
		198,5,17,0,0,198,17,1,0,0,0,199,204,3,28,14,0,200,201,5,23,0,0,201,203,
		3,28,14,0,202,200,1,0,0,0,203,206,1,0,0,0,204,202,1,0,0,0,204,205,1,0,
		0,0,205,19,1,0,0,0,206,204,1,0,0,0,207,212,3,22,11,0,208,209,5,28,0,0,
		209,211,3,22,11,0,210,208,1,0,0,0,211,214,1,0,0,0,212,210,1,0,0,0,212,
		213,1,0,0,0,213,21,1,0,0,0,214,212,1,0,0,0,215,220,3,24,12,0,216,217,5,
		29,0,0,217,219,3,24,12,0,218,216,1,0,0,0,219,222,1,0,0,0,220,218,1,0,0,
		0,220,221,1,0,0,0,221,23,1,0,0,0,222,220,1,0,0,0,223,224,3,28,14,0,224,
		225,3,42,21,0,225,226,3,28,14,0,226,25,1,0,0,0,227,228,5,18,0,0,228,229,
		3,12,6,0,229,230,5,19,0,0,230,27,1,0,0,0,231,234,5,37,0,0,232,234,3,26,
		13,0,233,231,1,0,0,0,233,232,1,0,0,0,233,234,1,0,0,0,234,235,1,0,0,0,235,
		241,3,32,16,0,236,237,3,30,15,0,237,238,3,32,16,0,238,240,1,0,0,0,239,
		236,1,0,0,0,240,243,1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,29,1,0,
		0,0,243,241,1,0,0,0,244,245,7,0,0,0,245,31,1,0,0,0,246,252,3,36,18,0,247,
		248,3,34,17,0,248,249,3,36,18,0,249,251,1,0,0,0,250,247,1,0,0,0,251,254,
		1,0,0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,33,1,0,0,0,254,252,1,0,0,0,
		255,256,7,1,0,0,256,35,1,0,0,0,257,263,3,38,19,0,258,260,5,18,0,0,259,
		261,3,18,9,0,260,259,1,0,0,0,260,261,1,0,0,0,261,262,1,0,0,0,262,264,5,
		19,0,0,263,258,1,0,0,0,263,264,1,0,0,0,264,289,1,0,0,0,265,267,5,37,0,
		0,266,265,1,0,0,0,266,267,1,0,0,0,267,268,1,0,0,0,268,289,5,44,0,0,269,
		289,5,47,0,0,270,289,5,46,0,0,271,273,5,37,0,0,272,271,1,0,0,0,272,273,
		1,0,0,0,273,274,1,0,0,0,274,289,5,43,0,0,275,289,7,2,0,0,276,277,5,15,
		0,0,277,282,3,40,20,0,278,279,5,20,0,0,279,280,3,28,14,0,280,281,5,21,
		0,0,281,283,1,0,0,0,282,278,1,0,0,0,282,283,1,0,0,0,283,289,1,0,0,0,284,
		285,5,18,0,0,285,286,3,28,14,0,286,287,5,19,0,0,287,289,1,0,0,0,288,257,
		1,0,0,0,288,266,1,0,0,0,288,269,1,0,0,0,288,270,1,0,0,0,288,272,1,0,0,
		0,288,275,1,0,0,0,288,276,1,0,0,0,288,284,1,0,0,0,289,37,1,0,0,0,290,299,
		3,40,20,0,291,292,5,24,0,0,292,298,3,40,20,0,293,294,5,20,0,0,294,295,
		3,28,14,0,295,296,5,21,0,0,296,298,1,0,0,0,297,291,1,0,0,0,297,293,1,0,
		0,0,298,301,1,0,0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,39,1,0,0,0,301,
		299,1,0,0,0,302,303,5,45,0,0,303,41,1,0,0,0,304,305,7,3,0,0,305,43,1,0,
		0,0,33,47,56,58,74,85,92,97,110,116,123,128,139,146,150,165,179,187,192,
		194,204,212,220,233,241,252,260,263,266,272,282,288,297,299
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace SyntacticAnalysisGenerated
